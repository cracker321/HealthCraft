version: '3'
# - docker-compose 파일의 버전을 정의함.
# - 여기서 '버전 3'은 Docker Compose 의 포맷을 나타냄.
#   버전에 따라 사용할 수 있는 기능이 다르며, '버전 3'은 여러 최신 기능들을 지원함.




# < docker compose 파일의 핵심 구성 요소 service >

# - 이 services 섹션은 이 아래에 컨테이너로 실행될 여러 각 service 들을 정의하는 루트 영역임.
#   '하나의 service'는 '하나의 컨테이너'를 의미하며,
#   이 아래에서 우리는 'app 서비스' 와 'db 서비스' 이렇게 2개의 서비스를 정의할 것임.
#   각각의 service 는 애플리케이션 또는 DB 와 같은 역할을 담당함.
# - 비유하자면, 마치 여러 개의 방을 가진 집을 상상하는 것과 같음.
#   'app'은 거실이고, 'db'는 부엌임.
#   각각의 방은 다른 목적을 가지고 있지만, 결국 하나의 집 안(Docker Compose 안)에 함께 있음.
services:




  # < Node.js 애플리케이션을 실행하는 service 를 정의하는 app >
  
  # - 이 서비스 app 은 컨테이너로 실행되며,
  #   이 컨테이너 안에서 Node.js 애플리케이션이 실행됨.
  # - 이 섹션은 애플리케이션의 빌드 방법, 포트 설정, 환경 변수 등을 정의함.
  app:




    # < Docker 에게 현재 디렉토리 안에 있는 Dockerfile 을 사용하여 애플릴케이션의 이미지를 빌드하라고 명령하는 명령어 >

    # - '.'
    #   : '현재 디렉토리'를 의미함. 즉, 'docker-compose.yml 파일'이 위치한 디렉토리에서 Dockerfile 을 찾아서
    #     이미지를 빌드하라고 Docker 에게 명령하는 것임.
    build: .




    # < 포트 매핑 설정 >

    # - 'ports'
    #   : - Docker Compose 에서 사용하는 명령어로, 포트 매핑을 설정할 때 사용됨.
    #     - 이 명령은 'Docker 컨테이너 내부에서 사용하는 포트('두 번째 3000')'를 외부에 공개하여,
    #       '내 컴퓨터 로컬 호스트, 즉 Docker 가 실행중인 컴퓨터의 포트('첫 번째 3000')' 에서
    #       해당 Docker 컨테이너에 접근할 수 있게 해줌.
    #     - 사용하는 목적
    #       : 외부 네트워크 또는 로컬 호스트 시스템에서 '이 NestJS 애플리케이션 app' 에 접근하기 위해서는,
    #         이 Docker 컨테이너 내부에서 실행되는 애플리케이션이 사용하는 포트가 외부로 열려 있어야 함.
    #         이때 'ports' 설정을 통해 '로컬 호스트(내 컴퓨터)'와 'Docker 컨테이너' 간의 '포트 연결을 설정하는 것임'!!!
    ports:

      # - '첫 번째 포트 3000' --> 로컬 호스트(= 서버)의 포트
      #   : - 첫 번째 포트 3000 은 '로컬 호스트 컴퓨터(= 서버)에서 사용할 포트 번호'임.
      #       즉, 외부에서 오는 요청(HTTP 요청)은 로컬 호스트 시스템의 3000번 포트로 들어오게 됨.
      #     ***중요***
      #     - 비유하자면, '호스트 포트(= 서버)'는 '아파트 현관문의 현관 비밀번호'와 같음.
      #       외부 사람들이 우리 집을 방문할 때, 이 현관문을 통해서만 우리 집으로 들어올 수 있음.
      #     ***중요***
      #     - 이 호스트 포트(= 서버)가 열려 있지 않으면, 외부에서 들어오는 네트워크 요청을 받을 수 없다!
      #       예를 들어, 실제 웹서비스 사용자가 웹 브라우저에서 'http://localhost:3000'을 통해 접속할 때,
      #       로컬 호스트(= 내 컴퓨터 = 서버)의 3000번 포트로 요청이 들어오게 된다!!
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db             # MySQL 컨테이너의 서비스 이름을 DB_HOST로 설정
      - DB_PORT=3306           # MySQL의 기본 포트
      - DB_USERNAME=root       # MySQL 기본 사용자명
      - DB_PASSWORD=1234    # MySQL 비밀번호
      - DB_NAME=mydb           # 사용할 데이터베이스 이름
    depends_on:
      - db                    # db 컨테이너가 먼저 시작되어야 함

  db:
    image: mysql:5.7           # MySQL 5.7 이미지 사용
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: mydb
    ports:
      - "3306:3306"
