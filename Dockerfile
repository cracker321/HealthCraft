FROM node:16-alpine
# < Docker 이미지를 지정하는 명령어 >

# - 'node:16-alpine'은 Node.js 16 버전의 Alpine Linux 기반 경량 이미지를 사용함
#   'alpine' 은 매우 작은 크기의 리눅스 배포판으로, 기본적인 Linux 기능만 포함되어 있어
#   이미지 크기를 줄이는데 유리함.
# - 'node:16' 은 Node.js 16 버전을 사용하겠다는 의미임.
#   이 버전이 애플리케이션과 호환되는지 확인해야 함.




# ***중요***
# < Docker 컨테이너 내부에서 작업할 기본 디렉토리 설정 >

# - 도커 컨테이너 내부에 '/app' 디렉토리를 생성하고, 그 안에서 모든 작업이 이루어지게 설정함.
#   컨테이너 내부에서 명령어를 실행할 기본 디렉토리를 '/app' 디렉토리로 설정하는 것임.
#   여기서는 '/app' 이라는 디렉토리를 생성하고, 그 /app 디렉토리 안에서 명령어가 실행되도록 설정하는 것임.
# - '/app' 디렉토리는 도커 컨테이너 내부에서 이 프로젝트에 대한 루트 디렉토리로, 
#   소스 코드와 관련 파일들이 복사될 곳임.
# - 이는 실제로는 컨테이너 내부에 존재하는 가상 파일 시스템 상의 경로임.
#   컨테이너가 실행되면 작업 디렉토리로 자등올 이동함.
#   이로 인해 추가적인 경로 지정 없이 명령어를 실행할 수 있게 되는 것임.
WORKDIR /app




# < 로컬의 'package.json' 과 'package-lock.json' 파일을 'Docker 컨테이너 내부의 현재 디렉토리 app' 으로 복사함 >

# - 'package.json' 파일과 'package-lock.json' 파일을 복사하는 이유는
#   이 파일들이 프로젝트의 의존성 dependencies 를 정의하기 때문임.
#   즉, 이 프로젝트가 동작하기 위해 어떤 라이브러리들이 필요한지 명시되어 있는 파일들임!!
# - 여기서는'package*.json' 의 와일드카드 패넡능ㄹ 사용하여, 두 파일을 모두 복사함.
#   즉, '*'를 사용함으로써 'package.json' 과 'package-lock.json'이 모두 함께 복사됨.
#   즉, 'package.json' 은 와일드카드 패턴으로, 'pakcage.json' 과 'pakcage-lock.json' 파일을 모두 복사할 수 있음.
# - 이 단계에서 이 파일들만 먼저 복사하는 이유는 ***캐시 레이어*** 를 활용하기 위함임.
#   Docker 는 이전 빌드의 캐시를 재사용할 수 있도록 하여 빌드 시간을 줄여줌.
#   만약, 소스 코드가 변경되지 않고 의존성도 변경되지 않았다면,
#   이후 npmp install 명령어도 캐시에서 재사용된다!!
COPY package*.json ./




# < 의

RUN npm install

COPY . .

RUN npm run build

EXPOSE 3000

CMD ["npm", "run", "start:prod"]




